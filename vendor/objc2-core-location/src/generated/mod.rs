// This file has been automatically generated by `objc2`'s `header-translator`.
// DO NOT EDIT

#![allow(unused_imports)]
#![allow(deprecated)]
#![allow(non_snake_case)]
#![allow(non_camel_case_types)]
#![allow(non_upper_case_globals)]
#![allow(missing_docs)]
#![allow(clippy::too_many_arguments)]
#![allow(clippy::type_complexity)]
#![allow(clippy::upper_case_acronyms)]
#![allow(clippy::identity_op)]
#![allow(clippy::missing_safety_doc)]

#[link(name = "CoreLocation", kind = "framework")]
extern "C" {}

#[cfg(feature = "CLAvailability")]
#[path = "CLAvailability.rs"]
mod __CLAvailability;
#[cfg(feature = "CLBackgroundActivitySession")]
#[path = "CLBackgroundActivitySession.rs"]
mod __CLBackgroundActivitySession;
#[cfg(feature = "CLBeaconIdentityCondition")]
#[path = "CLBeaconIdentityCondition.rs"]
mod __CLBeaconIdentityCondition;
#[cfg(feature = "CLBeaconIdentityConstraint")]
#[path = "CLBeaconIdentityConstraint.rs"]
mod __CLBeaconIdentityConstraint;
#[cfg(feature = "CLBeaconRegion")]
#[path = "CLBeaconRegion.rs"]
mod __CLBeaconRegion;
#[cfg(feature = "CLCircularGeographicCondition")]
#[path = "CLCircularGeographicCondition.rs"]
mod __CLCircularGeographicCondition;
#[cfg(feature = "CLCircularRegion")]
#[path = "CLCircularRegion.rs"]
mod __CLCircularRegion;
#[cfg(feature = "CLCondition")]
#[path = "CLCondition.rs"]
mod __CLCondition;
#[cfg(feature = "CLError")]
#[path = "CLError.rs"]
mod __CLError;
#[cfg(feature = "CLErrorDomain")]
#[path = "CLErrorDomain.rs"]
mod __CLErrorDomain;
#[cfg(feature = "CLGeocoder")]
#[path = "CLGeocoder.rs"]
mod __CLGeocoder;
#[cfg(feature = "CLHeading")]
#[path = "CLHeading.rs"]
mod __CLHeading;
#[cfg(feature = "CLLocation")]
#[path = "CLLocation.rs"]
mod __CLLocation;
#[cfg(feature = "CLLocationManager")]
#[path = "CLLocationManager.rs"]
mod __CLLocationManager;
#[cfg(feature = "CLLocationManagerDelegate")]
#[path = "CLLocationManagerDelegate.rs"]
mod __CLLocationManagerDelegate;
#[cfg(feature = "CLLocationManager_CLVisitExtensions")]
#[path = "CLLocationManager_CLVisitExtensions.rs"]
mod __CLLocationManager_CLVisitExtensions;
#[cfg(feature = "CLLocationPushServiceError")]
#[path = "CLLocationPushServiceError.rs"]
mod __CLLocationPushServiceError;
#[cfg(feature = "CLLocationPushServiceExtension")]
#[path = "CLLocationPushServiceExtension.rs"]
mod __CLLocationPushServiceExtension;
#[cfg(feature = "CLLocationUpdater")]
#[path = "CLLocationUpdater.rs"]
mod __CLLocationUpdater;
#[cfg(feature = "CLMonitor")]
#[path = "CLMonitor.rs"]
mod __CLMonitor;
#[cfg(feature = "CLMonitorConfiguration")]
#[path = "CLMonitorConfiguration.rs"]
mod __CLMonitorConfiguration;
#[cfg(feature = "CLMonitoringEvent")]
#[path = "CLMonitoringEvent.rs"]
mod __CLMonitoringEvent;
#[cfg(feature = "CLMonitoringRecord")]
#[path = "CLMonitoringRecord.rs"]
mod __CLMonitoringRecord;
#[cfg(feature = "CLPlacemark")]
#[path = "CLPlacemark.rs"]
mod __CLPlacemark;
#[cfg(feature = "CLRegion")]
#[path = "CLRegion.rs"]
mod __CLRegion;
#[cfg(feature = "CLVisit")]
#[path = "CLVisit.rs"]
mod __CLVisit;

#[cfg(feature = "CLBackgroundActivitySession")]
pub use self::__CLBackgroundActivitySession::CLBackgroundActivitySession;
#[cfg(all(feature = "CLBeaconIdentityCondition", feature = "CLCondition"))]
pub use self::__CLBeaconIdentityCondition::CLBeaconIdentityCondition;
#[cfg(feature = "CLBeaconIdentityCondition")]
pub use self::__CLBeaconIdentityCondition::CLBeaconMajorValue;
#[cfg(feature = "CLBeaconIdentityCondition")]
pub use self::__CLBeaconIdentityCondition::CLBeaconMinorValue;
#[cfg(all(
    feature = "CLBeaconIdentityCondition",
    feature = "CLBeaconIdentityConstraint",
    feature = "CLCondition"
))]
pub use self::__CLBeaconIdentityConstraint::CLBeaconIdentityConstraint;
#[cfg(feature = "CLBeaconRegion")]
pub use self::__CLBeaconRegion::CLBeacon;
#[cfg(all(feature = "CLBeaconRegion", feature = "CLRegion"))]
pub use self::__CLBeaconRegion::CLBeaconRegion;
#[cfg(all(feature = "CLCircularGeographicCondition", feature = "CLCondition"))]
pub use self::__CLCircularGeographicCondition::CLCircularGeographicCondition;
#[cfg(all(feature = "CLCircularRegion", feature = "CLRegion"))]
pub use self::__CLCircularRegion::CLCircularRegion;
#[cfg(feature = "CLCondition")]
pub use self::__CLCondition::CLCondition;
#[cfg(feature = "CLError")]
pub use self::__CLError::kCLErrorUserInfoAlternateRegionKey;
#[cfg(feature = "CLError")]
pub use self::__CLError::CLError;
#[cfg(feature = "CLErrorDomain")]
pub use self::__CLErrorDomain::kCLErrorDomain;
#[cfg(all(feature = "CLGeocoder", feature = "CLPlacemark", feature = "block2"))]
pub use self::__CLGeocoder::CLGeocodeCompletionHandler;
#[cfg(feature = "CLGeocoder")]
pub use self::__CLGeocoder::CLGeocoder;
#[cfg(all(feature = "CLHeading", feature = "CLLocation"))]
pub use self::__CLHeading::kCLHeadingFilterNone;
#[cfg(feature = "CLHeading")]
pub use self::__CLHeading::CLHeading;
#[cfg(feature = "CLHeading")]
pub use self::__CLHeading::CLHeadingComponentValue;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLDistanceFilterNone;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyBest;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyBestForNavigation;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyHundredMeters;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyKilometer;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyNearestTenMeters;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyReduced;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationAccuracyThreeKilometers;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::kCLLocationCoordinate2DInvalid;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLFloor;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocation;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationAccuracy;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationCoordinate2D;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationCoordinate2DIsValid;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationCoordinate2DMake;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationDegrees;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationDirection;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationDirectionAccuracy;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationDistance;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationDistanceMax;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationSourceInformation;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationSpeed;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLLocationSpeedAccuracy;
#[cfg(feature = "CLLocation")]
pub use self::__CLLocation::CLTimeIntervalMax;
#[cfg(feature = "CLLocationManager")]
pub use self::__CLLocationManager::CLAccuracyAuthorization;
#[cfg(feature = "CLLocationManager")]
pub use self::__CLLocationManager::CLActivityType;
#[cfg(feature = "CLLocationManager")]
pub use self::__CLLocationManager::CLAuthorizationStatus;
#[cfg(feature = "CLLocationManager")]
pub use self::__CLLocationManager::CLDeviceOrientation;
#[cfg(feature = "CLLocationManager")]
pub use self::__CLLocationManager::CLLocationManager;
#[cfg(feature = "CLLocationManagerDelegate")]
pub use self::__CLLocationManagerDelegate::CLLocationManagerDelegate;
#[cfg(feature = "CLLocationPushServiceError")]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceError;
#[cfg(feature = "CLLocationPushServiceError")]
pub use self::__CLLocationPushServiceError::CLLocationPushServiceErrorDomain;
#[cfg(feature = "CLLocationPushServiceExtension")]
pub use self::__CLLocationPushServiceExtension::CLLocationPushServiceExtension;
#[cfg(feature = "CLLocationUpdater")]
pub use self::__CLLocationUpdater::CLLiveUpdateConfiguration;
#[cfg(feature = "CLLocationUpdater")]
pub use self::__CLLocationUpdater::CLLocationUpdater;
#[cfg(feature = "CLLocationUpdater")]
pub use self::__CLLocationUpdater::CLUpdate;
#[cfg(feature = "CLMonitor")]
pub use self::__CLMonitor::CLMonitor;
#[cfg(feature = "CLMonitorConfiguration")]
pub use self::__CLMonitorConfiguration::CLMonitorConfiguration;
#[cfg(feature = "CLMonitoringEvent")]
pub use self::__CLMonitoringEvent::CLMonitoringEvent;
#[cfg(feature = "CLMonitoringEvent")]
pub use self::__CLMonitoringEvent::CLMonitoringState;
#[cfg(feature = "CLMonitoringRecord")]
pub use self::__CLMonitoringRecord::CLMonitoringRecord;
#[cfg(feature = "CLPlacemark")]
pub use self::__CLPlacemark::CLPlacemark;
#[cfg(feature = "CLRegion")]
pub use self::__CLRegion::CLProximity;
#[cfg(feature = "CLRegion")]
pub use self::__CLRegion::CLRegion;
#[cfg(feature = "CLRegion")]
pub use self::__CLRegion::CLRegionState;
#[cfg(feature = "CLVisit")]
pub use self::__CLVisit::CLVisit;
