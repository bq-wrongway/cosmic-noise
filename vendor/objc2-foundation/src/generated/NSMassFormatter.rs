//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

// NS_ENUM
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct NSMassFormatterUnit(pub NSInteger);
impl NSMassFormatterUnit {
    #[doc(alias = "NSMassFormatterUnitGram")]
    pub const Gram: Self = Self(11);
    #[doc(alias = "NSMassFormatterUnitKilogram")]
    pub const Kilogram: Self = Self(14);
    #[doc(alias = "NSMassFormatterUnitOunce")]
    pub const Ounce: Self = Self((6 << 8) + 1);
    #[doc(alias = "NSMassFormatterUnitPound")]
    pub const Pound: Self = Self((6 << 8) + 2);
    #[doc(alias = "NSMassFormatterUnitStone")]
    pub const Stone: Self = Self((6 << 8) + 3);
}

unsafe impl Encode for NSMassFormatterUnit {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for NSMassFormatterUnit {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "NSFormatter")]
    pub struct NSMassFormatter;

    #[cfg(feature = "NSFormatter")]
    unsafe impl ClassType for NSMassFormatter {
        #[inherits(NSObject)]
        type Super = NSFormatter;
        type Mutability = InteriorMutable;
    }
);

#[cfg(all(feature = "NSFormatter", feature = "NSObject"))]
unsafe impl NSCoding for NSMassFormatter {}

#[cfg(all(feature = "NSFormatter", feature = "NSObject"))]
unsafe impl NSCopying for NSMassFormatter {}

#[cfg(feature = "NSFormatter")]
unsafe impl NSObjectProtocol for NSMassFormatter {}

extern_methods!(
    #[cfg(feature = "NSFormatter")]
    unsafe impl NSMassFormatter {
        #[cfg(feature = "NSNumberFormatter")]
        #[method_id(@__retain_semantics Other numberFormatter)]
        pub unsafe fn numberFormatter(&self) -> Retained<NSNumberFormatter>;

        #[cfg(feature = "NSNumberFormatter")]
        #[method(setNumberFormatter:)]
        pub unsafe fn setNumberFormatter(&self, number_formatter: Option<&NSNumberFormatter>);

        #[method(unitStyle)]
        pub unsafe fn unitStyle(&self) -> NSFormattingUnitStyle;

        #[method(setUnitStyle:)]
        pub unsafe fn setUnitStyle(&self, unit_style: NSFormattingUnitStyle);

        #[method(isForPersonMassUse)]
        pub unsafe fn isForPersonMassUse(&self) -> bool;

        #[method(setForPersonMassUse:)]
        pub unsafe fn setForPersonMassUse(&self, for_person_mass_use: bool);

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other stringFromValue:unit:)]
        pub unsafe fn stringFromValue_unit(
            &self,
            value: c_double,
            unit: NSMassFormatterUnit,
        ) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other stringFromKilograms:)]
        pub unsafe fn stringFromKilograms(
            &self,
            number_in_kilograms: c_double,
        ) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other unitStringFromValue:unit:)]
        pub unsafe fn unitStringFromValue_unit(
            &self,
            value: c_double,
            unit: NSMassFormatterUnit,
        ) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other unitStringFromKilograms:usedUnit:)]
        pub unsafe fn unitStringFromKilograms_usedUnit(
            &self,
            number_in_kilograms: c_double,
            unitp: *mut NSMassFormatterUnit,
        ) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method(getObjectValue:forString:errorDescription:)]
        pub unsafe fn getObjectValue_forString_errorDescription(
            &self,
            obj: Option<&mut Option<Retained<AnyObject>>>,
            string: &NSString,
            error: Option<&mut Option<Retained<NSString>>>,
        ) -> bool;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "NSFormatter")]
    unsafe impl NSMassFormatter {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
