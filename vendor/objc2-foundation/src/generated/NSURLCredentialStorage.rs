//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSURLCredentialStorage;

    unsafe impl ClassType for NSURLCredentialStorage {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

unsafe impl Send for NSURLCredentialStorage {}

unsafe impl Sync for NSURLCredentialStorage {}

unsafe impl NSObjectProtocol for NSURLCredentialStorage {}

extern_methods!(
    unsafe impl NSURLCredentialStorage {
        #[method_id(@__retain_semantics Other sharedCredentialStorage)]
        pub unsafe fn sharedCredentialStorage() -> Retained<NSURLCredentialStorage>;

        #[cfg(all(
            feature = "NSDictionary",
            feature = "NSString",
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace"
        ))]
        #[method_id(@__retain_semantics Other credentialsForProtectionSpace:)]
        pub unsafe fn credentialsForProtectionSpace(
            &self,
            space: &NSURLProtectionSpace,
        ) -> Option<Retained<NSDictionary<NSString, NSURLCredential>>>;

        #[cfg(all(
            feature = "NSDictionary",
            feature = "NSString",
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace"
        ))]
        #[method_id(@__retain_semantics Other allCredentials)]
        pub unsafe fn allCredentials(
            &self,
        ) -> Retained<NSDictionary<NSURLProtectionSpace, NSDictionary<NSString, NSURLCredential>>>;

        #[cfg(all(feature = "NSURLCredential", feature = "NSURLProtectionSpace"))]
        #[method(setCredential:forProtectionSpace:)]
        pub unsafe fn setCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );

        #[cfg(all(feature = "NSURLCredential", feature = "NSURLProtectionSpace"))]
        #[method(removeCredential:forProtectionSpace:)]
        pub unsafe fn removeCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );

        #[cfg(all(
            feature = "NSDictionary",
            feature = "NSString",
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace"
        ))]
        #[method(removeCredential:forProtectionSpace:options:)]
        pub unsafe fn removeCredential_forProtectionSpace_options(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
            options: Option<&NSDictionary<NSString, AnyObject>>,
        );

        #[cfg(all(feature = "NSURLCredential", feature = "NSURLProtectionSpace"))]
        #[method_id(@__retain_semantics Other defaultCredentialForProtectionSpace:)]
        pub unsafe fn defaultCredentialForProtectionSpace(
            &self,
            space: &NSURLProtectionSpace,
        ) -> Option<Retained<NSURLCredential>>;

        #[cfg(all(feature = "NSURLCredential", feature = "NSURLProtectionSpace"))]
        #[method(setDefaultCredential:forProtectionSpace:)]
        pub unsafe fn setDefaultCredential_forProtectionSpace(
            &self,
            credential: &NSURLCredential,
            space: &NSURLProtectionSpace,
        );
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSURLCredentialStorage {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);

extern_methods!(
    /// NSURLSessionTaskAdditions
    unsafe impl NSURLCredentialStorage {
        #[cfg(all(
            feature = "NSDictionary",
            feature = "NSString",
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace",
            feature = "NSURLSession",
            feature = "block2"
        ))]
        #[method(getCredentialsForProtectionSpace:task:completionHandler:)]
        pub unsafe fn getCredentialsForProtectionSpace_task_completionHandler(
            &self,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
            completion_handler: &block2::Block<
                dyn Fn(*mut NSDictionary<NSString, NSURLCredential>),
            >,
        );

        #[cfg(all(
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace",
            feature = "NSURLSession"
        ))]
        #[method(setCredential:forProtectionSpace:task:)]
        pub unsafe fn setCredential_forProtectionSpace_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
        );

        #[cfg(all(
            feature = "NSDictionary",
            feature = "NSString",
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace",
            feature = "NSURLSession"
        ))]
        #[method(removeCredential:forProtectionSpace:options:task:)]
        pub unsafe fn removeCredential_forProtectionSpace_options_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            options: Option<&NSDictionary<NSString, AnyObject>>,
            task: &NSURLSessionTask,
        );

        #[cfg(all(
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace",
            feature = "NSURLSession",
            feature = "block2"
        ))]
        #[method(getDefaultCredentialForProtectionSpace:task:completionHandler:)]
        pub unsafe fn getDefaultCredentialForProtectionSpace_task_completionHandler(
            &self,
            space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
            completion_handler: &block2::Block<dyn Fn(*mut NSURLCredential)>,
        );

        #[cfg(all(
            feature = "NSURLCredential",
            feature = "NSURLProtectionSpace",
            feature = "NSURLSession"
        ))]
        #[method(setDefaultCredential:forProtectionSpace:task:)]
        pub unsafe fn setDefaultCredential_forProtectionSpace_task(
            &self,
            credential: &NSURLCredential,
            protection_space: &NSURLProtectionSpace,
            task: &NSURLSessionTask,
        );
    }
);

extern "C" {
    #[cfg(all(feature = "NSNotification", feature = "NSString"))]
    pub static NSURLCredentialStorageChangedNotification: &'static NSNotificationName;
}

extern "C" {
    #[cfg(feature = "NSString")]
    pub static NSURLCredentialStorageRemoveSynchronizableCredentials: &'static NSString;
}
