//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct NSScriptCommandDescription;

    unsafe impl ClassType for NSScriptCommandDescription {
        type Super = NSObject;
        type Mutability = InteriorMutable;
    }
);

#[cfg(feature = "NSObject")]
unsafe impl NSCoding for NSScriptCommandDescription {}

unsafe impl NSObjectProtocol for NSScriptCommandDescription {}

extern_methods!(
    unsafe impl NSScriptCommandDescription {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[cfg(all(feature = "NSDictionary", feature = "NSString"))]
        #[method_id(@__retain_semantics Init initWithSuiteName:commandName:dictionary:)]
        pub unsafe fn initWithSuiteName_commandName_dictionary(
            this: Allocated<Self>,
            suite_name: &NSString,
            command_name: &NSString,
            command_declaration: Option<&NSDictionary>,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSCoder")]
        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            in_coder: &NSCoder,
        ) -> Option<Retained<Self>>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other suiteName)]
        pub unsafe fn suiteName(&self) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other commandName)]
        pub unsafe fn commandName(&self) -> Retained<NSString>;

        #[method(appleEventClassCode)]
        pub unsafe fn appleEventClassCode(&self) -> FourCharCode;

        #[method(appleEventCode)]
        pub unsafe fn appleEventCode(&self) -> FourCharCode;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other commandClassName)]
        pub unsafe fn commandClassName(&self) -> Retained<NSString>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other returnType)]
        pub unsafe fn returnType(&self) -> Option<Retained<NSString>>;

        #[method(appleEventCodeForReturnType)]
        pub unsafe fn appleEventCodeForReturnType(&self) -> FourCharCode;

        #[cfg(all(feature = "NSArray", feature = "NSString"))]
        #[method_id(@__retain_semantics Other argumentNames)]
        pub unsafe fn argumentNames(&self) -> Retained<NSArray<NSString>>;

        #[cfg(feature = "NSString")]
        #[method_id(@__retain_semantics Other typeForArgumentWithName:)]
        pub unsafe fn typeForArgumentWithName(
            &self,
            argument_name: &NSString,
        ) -> Option<Retained<NSString>>;

        #[cfg(feature = "NSString")]
        #[method(appleEventCodeForArgumentWithName:)]
        pub unsafe fn appleEventCodeForArgumentWithName(
            &self,
            argument_name: &NSString,
        ) -> FourCharCode;

        #[cfg(feature = "NSString")]
        #[method(isOptionalArgumentWithName:)]
        pub unsafe fn isOptionalArgumentWithName(&self, argument_name: &NSString) -> bool;

        #[cfg(feature = "NSScriptCommand")]
        #[method_id(@__retain_semantics Other createCommandInstance)]
        pub unsafe fn createCommandInstance(&self) -> Retained<NSScriptCommand>;

        #[cfg(all(feature = "NSScriptCommand", feature = "NSZone"))]
        #[method_id(@__retain_semantics Other createCommandInstanceWithZone:)]
        pub unsafe fn createCommandInstanceWithZone(
            &self,
            zone: *mut NSZone,
        ) -> Retained<NSScriptCommand>;
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    unsafe impl NSScriptCommandDescription {
        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new() -> Retained<Self>;
    }
);
