//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "UILayoutGuide")]
    pub struct UIFocusGuide;

    #[cfg(feature = "UILayoutGuide")]
    unsafe impl ClassType for UIFocusGuide {
        #[inherits(NSObject)]
        type Super = UILayoutGuide;
        type Mutability = MainThreadOnly;
    }
);

#[cfg(feature = "UILayoutGuide")]
unsafe impl NSCoding for UIFocusGuide {}

#[cfg(feature = "UILayoutGuide")]
unsafe impl NSObjectProtocol for UIFocusGuide {}

extern_methods!(
    #[cfg(feature = "UILayoutGuide")]
    unsafe impl UIFocusGuide {
        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[cfg(feature = "UIFocus")]
        #[method_id(@__retain_semantics Other preferredFocusEnvironments)]
        pub unsafe fn preferredFocusEnvironments(
            &self,
        ) -> Retained<NSArray<ProtocolObject<dyn UIFocusEnvironment>>>;

        #[cfg(feature = "UIFocus")]
        #[method(setPreferredFocusEnvironments:)]
        pub unsafe fn setPreferredFocusEnvironments(
            &self,
            preferred_focus_environments: Option<&NSArray<ProtocolObject<dyn UIFocusEnvironment>>>,
        );

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[deprecated]
        #[method_id(@__retain_semantics Other preferredFocusedView)]
        pub unsafe fn preferredFocusedView(&self) -> Option<Retained<UIView>>;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[deprecated]
        #[method(setPreferredFocusedView:)]
        pub unsafe fn setPreferredFocusedView(&self, preferred_focused_view: Option<&UIView>);
    }
);

extern_methods!(
    /// Methods declared on superclass `NSObject`
    #[cfg(feature = "UILayoutGuide")]
    unsafe impl UIFocusGuide {
        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);
