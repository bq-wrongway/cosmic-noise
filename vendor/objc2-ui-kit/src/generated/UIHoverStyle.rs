//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIHoverStyle;

    unsafe impl ClassType for UIHoverStyle {
        type Super = NSObject;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSCopying for UIHoverStyle {}

unsafe impl NSObjectProtocol for UIHoverStyle {}

extern_methods!(
    unsafe impl UIHoverStyle {
        #[cfg(feature = "UIHoverEffect")]
        #[method_id(@__retain_semantics Other effect)]
        pub unsafe fn effect(&self) -> Retained<ProtocolObject<dyn UIHoverEffect>>;

        #[cfg(feature = "UIHoverEffect")]
        #[method(setEffect:)]
        pub unsafe fn setEffect(&self, effect: &ProtocolObject<dyn UIHoverEffect>);

        #[cfg(feature = "UIShape")]
        #[method_id(@__retain_semantics Other shape)]
        pub unsafe fn shape(&self) -> Option<Retained<UIShape>>;

        #[cfg(feature = "UIShape")]
        #[method(setShape:)]
        pub unsafe fn setShape(&self, shape: Option<&UIShape>);

        #[method(isEnabled)]
        pub unsafe fn isEnabled(&self) -> bool;

        #[method(setEnabled:)]
        pub unsafe fn setEnabled(&self, enabled: bool);

        #[cfg(all(feature = "UIHoverEffect", feature = "UIShape"))]
        #[method_id(@__retain_semantics Other styleWithEffect:shape:)]
        pub unsafe fn styleWithEffect_shape(
            effect: &ProtocolObject<dyn UIHoverEffect>,
            shape: Option<&UIShape>,
        ) -> Retained<Self>;

        #[cfg(feature = "UIShape")]
        #[method_id(@__retain_semantics Other styleWithShape:)]
        pub unsafe fn styleWithShape(
            shape: Option<&UIShape>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Other automaticStyle)]
        pub unsafe fn automaticStyle(mtm: MainThreadMarker) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;
    }
);

extern_methods!(
    /// UIHoverStyle
    #[cfg(all(feature = "UIResponder", feature = "UIView"))]
    unsafe impl UIView {
        #[method_id(@__retain_semantics Other hoverStyle)]
        pub unsafe fn hoverStyle(&self) -> Option<Retained<UIHoverStyle>>;

        #[method(setHoverStyle:)]
        pub unsafe fn setHoverStyle(&self, hover_style: Option<&UIHoverStyle>);
    }
);
