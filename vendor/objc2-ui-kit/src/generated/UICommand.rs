//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

// NS_OPTIONS
#[repr(transparent)]
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord)]
pub struct UIKeyModifierFlags(pub NSInteger);
bitflags::bitflags! {
    impl UIKeyModifierFlags: NSInteger {
        const UIKeyModifierAlphaShift = 1<<16;
        const UIKeyModifierShift = 1<<17;
        const UIKeyModifierControl = 1<<18;
        const UIKeyModifierAlternate = 1<<19;
        const UIKeyModifierCommand = 1<<20;
        const UIKeyModifierNumericPad = 1<<21;
    }
}

unsafe impl Encode for UIKeyModifierFlags {
    const ENCODING: Encoding = NSInteger::ENCODING;
}

unsafe impl RefEncode for UIKeyModifierFlags {
    const ENCODING_REF: Encoding = Encoding::Pointer(&Self::ENCODING);
}

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UICommandAlternate;

    unsafe impl ClassType for UICommandAlternate {
        type Super = NSObject;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSCoding for UICommandAlternate {}

unsafe impl NSCopying for UICommandAlternate {}

unsafe impl NSObjectProtocol for UICommandAlternate {}

unsafe impl NSSecureCoding for UICommandAlternate {}

extern_methods!(
    unsafe impl UICommandAlternate {
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method(action)]
        pub unsafe fn action(&self) -> Sel;

        #[method(modifierFlags)]
        pub unsafe fn modifierFlags(&self) -> UIKeyModifierFlags;

        #[method_id(@__retain_semantics Other alternateWithTitle:action:modifierFlags:)]
        pub unsafe fn alternateWithTitle_action_modifierFlags(
            title: &NSString,
            action: Sel,
            modifier_flags: UIKeyModifierFlags,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    #[cfg(feature = "UIMenuElement")]
    pub struct UICommand;

    #[cfg(feature = "UIMenuElement")]
    unsafe impl ClassType for UICommand {
        #[inherits(NSObject)]
        type Super = UIMenuElement;
        type Mutability = MainThreadOnly;
    }
);

#[cfg(feature = "UIMenuElement")]
unsafe impl NSCoding for UICommand {}

#[cfg(feature = "UIMenuElement")]
unsafe impl NSCopying for UICommand {}

#[cfg(feature = "UIMenuElement")]
unsafe impl NSObjectProtocol for UICommand {}

#[cfg(feature = "UIMenuElement")]
unsafe impl NSSecureCoding for UICommand {}

#[cfg(all(feature = "UIMenuElement", feature = "UIMenuLeaf"))]
unsafe impl UIMenuLeaf for UICommand {}

extern_methods!(
    #[cfg(feature = "UIMenuElement")]
    unsafe impl UICommand {
        #[method_id(@__retain_semantics Other title)]
        pub unsafe fn title(&self) -> Retained<NSString>;

        #[method(setTitle:)]
        pub unsafe fn setTitle(&self, title: &NSString);

        #[cfg(feature = "UIImage")]
        #[method_id(@__retain_semantics Other image)]
        pub unsafe fn image(&self) -> Option<Retained<UIImage>>;

        #[cfg(feature = "UIImage")]
        #[method(setImage:)]
        pub unsafe fn setImage(&self, image: Option<&UIImage>);

        #[method_id(@__retain_semantics Other discoverabilityTitle)]
        pub unsafe fn discoverabilityTitle(&self) -> Option<Retained<NSString>>;

        #[method(setDiscoverabilityTitle:)]
        pub unsafe fn setDiscoverabilityTitle(&self, discoverability_title: Option<&NSString>);

        #[method(action)]
        pub unsafe fn action(&self) -> Sel;

        #[method_id(@__retain_semantics Other propertyList)]
        pub unsafe fn propertyList(&self) -> Option<Retained<AnyObject>>;

        #[method(attributes)]
        pub unsafe fn attributes(&self) -> UIMenuElementAttributes;

        #[method(setAttributes:)]
        pub unsafe fn setAttributes(&self, attributes: UIMenuElementAttributes);

        #[method(state)]
        pub unsafe fn state(&self) -> UIMenuElementState;

        #[method(setState:)]
        pub unsafe fn setState(&self, state: UIMenuElementState);

        #[method_id(@__retain_semantics Other alternates)]
        pub unsafe fn alternates(&self) -> Retained<NSArray<UICommandAlternate>>;

        #[cfg(feature = "UIImage")]
        #[method_id(@__retain_semantics Other commandWithTitle:image:action:propertyList:)]
        pub unsafe fn commandWithTitle_image_action_propertyList(
            title: &NSString,
            image: Option<&UIImage>,
            action: Sel,
            property_list: Option<&AnyObject>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[cfg(feature = "UIImage")]
        #[method_id(@__retain_semantics Other commandWithTitle:image:action:propertyList:alternates:)]
        pub unsafe fn commandWithTitle_image_action_propertyList_alternates(
            title: &NSString,
            image: Option<&UIImage>,
            action: Sel,
            property_list: Option<&AnyObject>,
            alternates: &NSArray<UICommandAlternate>,
            mtm: MainThreadMarker,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics Init initWithCoder:)]
        pub unsafe fn initWithCoder(
            this: Allocated<Self>,
            coder: &NSCoder,
        ) -> Option<Retained<Self>>;
    }
);

extern "C" {
    pub static UICommandTagShare: &'static NSString;
}
