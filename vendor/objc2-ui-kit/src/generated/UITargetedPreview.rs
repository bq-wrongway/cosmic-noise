//! This file has been automatically generated by `objc2`'s `header-translator`.
//! DO NOT EDIT
use objc2::__framework_prelude::*;
use objc2_foundation::*;

use crate::*;

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UIPreviewTarget;

    unsafe impl ClassType for UIPreviewTarget {
        type Super = NSObject;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSCopying for UIPreviewTarget {}

unsafe impl NSObjectProtocol for UIPreviewTarget {}

extern_methods!(
    unsafe impl UIPreviewTarget {
        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method_id(@__retain_semantics Init initWithContainer:center:transform:)]
        pub unsafe fn initWithContainer_center_transform(
            this: Allocated<Self>,
            container: &UIView,
            center: CGPoint,
            transform: CGAffineTransform,
        ) -> Retained<Self>;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method_id(@__retain_semantics Init initWithContainer:center:)]
        pub unsafe fn initWithContainer_center(
            this: Allocated<Self>,
            container: &UIView,
            center: CGPoint,
        ) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method_id(@__retain_semantics Other container)]
        pub unsafe fn container(&self) -> Retained<UIView>;

        #[method(center)]
        pub unsafe fn center(&self) -> CGPoint;

        #[method(transform)]
        pub unsafe fn transform(&self) -> CGAffineTransform;
    }
);

extern_class!(
    #[derive(Debug, PartialEq, Eq, Hash)]
    pub struct UITargetedPreview;

    unsafe impl ClassType for UITargetedPreview {
        type Super = NSObject;
        type Mutability = MainThreadOnly;
    }
);

unsafe impl NSCopying for UITargetedPreview {}

unsafe impl NSObjectProtocol for UITargetedPreview {}

extern_methods!(
    unsafe impl UITargetedPreview {
        #[cfg(all(
            feature = "UIPreviewParameters",
            feature = "UIResponder",
            feature = "UIView"
        ))]
        #[method_id(@__retain_semantics Init initWithView:parameters:target:)]
        pub unsafe fn initWithView_parameters_target(
            this: Allocated<Self>,
            view: &UIView,
            parameters: &UIPreviewParameters,
            target: &UIPreviewTarget,
        ) -> Retained<Self>;

        #[cfg(all(
            feature = "UIPreviewParameters",
            feature = "UIResponder",
            feature = "UIView"
        ))]
        #[method_id(@__retain_semantics Init initWithView:parameters:)]
        pub unsafe fn initWithView_parameters(
            this: Allocated<Self>,
            view: &UIView,
            parameters: &UIPreviewParameters,
        ) -> Retained<Self>;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method_id(@__retain_semantics Init initWithView:)]
        pub unsafe fn initWithView(this: Allocated<Self>, view: &UIView) -> Retained<Self>;

        #[method_id(@__retain_semantics Init init)]
        pub unsafe fn init(this: Allocated<Self>) -> Retained<Self>;

        #[method_id(@__retain_semantics New new)]
        pub unsafe fn new(mtm: MainThreadMarker) -> Retained<Self>;

        #[method_id(@__retain_semantics Other target)]
        pub unsafe fn target(&self) -> Retained<UIPreviewTarget>;

        #[cfg(all(feature = "UIResponder", feature = "UIView"))]
        #[method_id(@__retain_semantics Other view)]
        pub unsafe fn view(&self) -> Retained<UIView>;

        #[cfg(feature = "UIPreviewParameters")]
        #[method_id(@__retain_semantics Other parameters)]
        pub unsafe fn parameters(&self) -> Retained<UIPreviewParameters>;

        #[method(size)]
        pub unsafe fn size(&self) -> CGSize;

        #[method_id(@__retain_semantics Other retargetedPreviewWithTarget:)]
        pub unsafe fn retargetedPreviewWithTarget(
            &self,
            new_target: &UIPreviewTarget,
        ) -> Retained<UITargetedPreview>;
    }
);
