name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            package_type: flatpak
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            package_type: msi
          - os: macos-latest
            target: x86_64-apple-darwin
            package_type: app

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install cargo-bundle (macOS)
        if: matrix.os == 'macos-latest'
        run: cargo install cargo-bundle

      - name: Install cargo-wix (Windows)
        if: matrix.os == 'windows-latest'
        run: cargo install cargo-wix

      - name: Build application
        run: cargo build --release --target ${{ matrix.target }}

      - name: Create macOS .app bundle
        if: matrix.os == 'macos-latest'
        run: |
          # Ensure all resources are copied to the bundle
          cargo bundle --release --target ${{ matrix.target }}
          # Rename the bundle to match our app name
          mv "target/${{ matrix.target }}/release/bundle/macos/Cosmic Noise.app" "target/${{ matrix.target }}/release/bundle/macos/CosmicNoise.app"
          # Verify the bundle contains all resources
          ls -la "target/${{ matrix.target }}/release/bundle/macos/CosmicNoise.app/Contents/Resources/"

      - name: Create Windows MSI installer
        if: matrix.os == 'windows-latest'
        run: |
          # Copy the executable and resources to a staging directory
          mkdir -p dist
          cp target/${{ matrix.target }}/release/cosmic_noise.exe dist/
          cp -r assets dist/
          cp -r i18n dist/
          cp -r resources dist/
          # Build MSI using cargo-wix
          cargo wix --target ${{ matrix.target }} --release --path dist

      - name: Create Flatpak (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          # Build the Flatpak package
          flatpak-builder --force-clean build-dir io.github.bq-wrongway.CosmicNoise.yaml
          # Create the Flatpak bundle
          flatpak build-bundle build-dir cosmic-noise.flatpak io.github.bq-wrongway.CosmicNoise

      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v3
        with:
          name: cosmic-noise-macos
          path: target/${{ matrix.target }}/release/bundle/macos/CosmicNoise.app

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: cosmic-noise-windows
          path: target/${{ matrix.target }}/release/wix/CosmicNoise.msi

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v3
        with:
          name: cosmic-noise-linux
          path: cosmic-noise.flatpak

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3
        with:
          path: artifacts

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            artifacts/cosmic-noise-macos/CosmicNoise.app
            artifacts/cosmic-noise-windows/CosmicNoise.msi
            artifacts/cosmic-noise-linux/cosmic-noise.flatpak
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 